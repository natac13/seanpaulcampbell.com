---
import Tag from "../../components/Tag.astro";
import { SITE } from "../../constants";
import Layout from "../../layouts/Layout.astro";
import { getAllTags, getFilteredPosts } from "../../lib/posts";
import { cn, formatDate } from "../../lib/utils";

// Remove the prerender directive to enable SSR
// export const prerender = true;

// Get URL search parameters
const tag = Astro.url.searchParams.get('tag') || null;
const searchTerm = Astro.url.searchParams.get('q') || null;
const page = Number.parseInt(Astro.url.searchParams.get('page') || '1', 10);

// Get filtered posts based on URL parameters
const { posts: filteredPosts, totalPages } = await getFilteredPosts(
  tag,
  searchTerm,
  page,
  SITE.postsPerPage
);

// Get all tags for filtering
const allTags = await getAllTags();

// Set cache control headers for better performance
// Cache the page for 10 minutes (600 seconds)
// Astro.response.headers.set(
//   'Cache-Control',
//   'public, max-age=600, s-maxage=600, stale-while-revalidate=60'
// );
---

<Layout title="Blog">
  <div class="space-y-8 max-w-4xl mx-auto">
    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-4">Blog</h1>
    </header>

    <!-- Search form -->
    <form method="get" action="/blog" class="mb-8">
      <div class="flex gap-2">
        <div class="relative flex-1">
          <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5 text-muted-foreground"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
              />
            </svg>
          </div>
          <input
            type="search"
            name="q"
            value={searchTerm || ''}
            class="w-full p-3 pl-10 border border-input outline-none rounded-lg bg-card text-card-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]"
            placeholder="Search posts..."
          />
        </div>
        <button
          type="submit"
          class="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
        >
          Search
        </button>
        {(tag || searchTerm) && (
          <a 
            href="/blog" 
            class="px-4 py-2 border border-border rounded-lg text-muted-foreground hover:bg-muted transition-colors"
          >
            Clear Filters
          </a>
        )}
      </div>
      {tag && <input type="hidden" name="tag" value={tag} />}
    </form>

    <!-- Tags filter -->
    <div>
      <h2 class="text-sm font-medium mb-2">Filter by tags:</h2>
      <div class="flex flex-wrap gap-2">
        <a
          href="/blog"
          class={`text-sm px-3 py-1 rounded-full transition-colors ${
            !tag
              ? 'bg-primary text-primary-foreground'
              : 'bg-muted text-muted-foreground hover:bg-primary/80 hover:text-primary-foreground'
          }`}
        >
          All
        </a>
        {allTags.map((tagItem) => (
          <a
            href={`/blog?tag=${tagItem.tag}${searchTerm ? `&q=${searchTerm}` : ''}`}
          >
            <Tag
              class={cn(
                "text-sm px-3 py-1.5",
                tag === tagItem.tag && "bg-primary text-primary-foreground"
              )}
            >
              {tagItem.tag} ({tagItem.count})
            </Tag>
          </a>
        ))}
      </div>
    </div>

    <!-- Blog posts -->
    <div class="space-y-10">
      {filteredPosts.length > 0 ? (
        <>
          {filteredPosts.map((post) => (
            <article class="border border-border rounded-xl p-6 transition-all hover:shadow-md group dark:shadow-foreground/10">
              <div class="relative isolate">
                <h2
                  class="text-2xl font-semibold mb-2 hover:text-primary transition-colors group-hover:text-primary"
                  transition:name={`blog-title-${post.id}`}
                >
                  {post.data.title}
                </h2>
                <a href={`/blog/${post.id}`}>
                  <span class="absolute inset-0 z-10" />
                </a>
                <p
                  class="text-muted-foreground mb-4"
                  transition:name={`blog-description-${post.id}`}
                >
                  {post.data.description}
                </p>
                <div class="flex flex-wrap items-center gap-3">
                  <span
                    class="text-sm text-muted-foreground"
                    transition:name={`blog-publish-date-${post.id}`}
                  >
                    {formatDate(post.data.publishDate)}
                  </span>
                  <span class="text-muted-foreground">â€¢</span>
                  <div
                    class="flex flex-wrap gap-2"
                    transition:name={`blog-tags-${post.id}`}
                  >
                    {post.data.tags &&
                      post.data.tags.map((tagName) => (
                        <Tag>{tagName}</Tag>
                      ))}
                  </div>
                </div>
              </div>
            </article>
          ))}
        </>
      ) : (
        <div class="text-center py-12">
          <p class="text-lg text-muted-foreground mb-4">No posts found matching your criteria.</p>
          <a href="/blog" class="text-primary hover:underline">View all posts</a>
        </div>
      )}
    </div>

    <!-- Pagination -->
    {totalPages > 1 && (
      <div class="mt-12 flex justify-center">
        <div class="flex space-x-2">
          <!-- Previous button -->
          <a
            href={`/blog?${new URLSearchParams({
              ...(tag ? { tag } : {}),
              ...(searchTerm ? { q: searchTerm } : {}),
              page: Math.max(1, page - 1).toString()
            })}`}
            class={`px-3 py-1 rounded border border-border ${
              page === 1 ? 'opacity-50 cursor-not-allowed pointer-events-none' : 'hover:bg-muted'
            }`}
            aria-label="Previous page"
          >
            &larr;
          </a>

          {/* Page buttons */}
          {[...Array(totalPages)].map((_, i) => (
            <a
              href={`/blog?${new URLSearchParams({
                ...(tag ? { tag } : {}),
                ...(searchTerm ? { q: searchTerm } : {}),
                page: (i + 1).toString()
              })}`}
              class={`px-3 py-1 rounded ${
                i + 1 === page
                  ? 'bg-primary text-primary-foreground'
                  : 'border border-border hover:bg-muted'
              }`}
            >
              {i + 1}
            </a>
          ))}

          <!-- Next button -->
          <a
            href={`/blog?${new URLSearchParams({
              ...(tag ? { tag } : {}),
              ...(searchTerm ? { q: searchTerm } : {}),
              page: Math.min(totalPages, page + 1).toString()
            })}`}
            class={`px-3 py-1 rounded border border-border ${
              page === totalPages ? 'opacity-50 cursor-not-allowed pointer-events-none' : 'hover:bg-muted'
            }`}
            aria-label="Next page"
          >
            &rarr;
          </a>
        </div>
      </div>
    )}
  </div>
</Layout>
